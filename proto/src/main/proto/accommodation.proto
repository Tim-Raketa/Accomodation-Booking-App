syntax = "proto3";

option java_multiple_files = true;

package com.devProblems;

message AccommodationReq{
  string name = 1;
  string location = 2;
  string perks = 3;
  int32 minGuests = 4;
  int32 maxGuests = 5;
  string hostId = 6;
}

message AccommodationResp{
  int64 id = 1;
  string name = 2;
  string location = 3;
  string perks = 4;
  int32 minGuests = 5;
  int32 maxGuests = 6;
  string hostId = 7;
}

message ListOfAccommodationResp{
  repeated AccommodationResp accommodations = 1;
}

message AccommodationAvailable{
  int64 id=1;
  string startDate=2;
  string endDate=3;
}

message Automatic{
  bool auto=1;
}

message RentableIntervalReq{
  int64 accommodationId = 1;
  string startTime = 2;
  string endTime = 3;
  float priceOfAccommodation = 4;
  float pricePerGuest = 5;
  bool automaticAcceptance = 6;
}

message UpdateRentableIntervalReq{
  int64 id = 1;
  int64 accommodationId = 2;
  string startTime = 3;
  string endTime = 4;
  float priceOfAccommodation = 5;
  float pricePerGuest = 6;
  bool automaticAcceptance = 7;
}

message RentableIntervalResp{
  int64 id = 1;
  int64 accommodationId = 2;
  string startTime = 3;
  string endTime = 4;
  float priceOfAccommodation = 5;
  float pricePerGuest = 6;
  bool automaticAcceptance = 7;
}
message ListOfSearchResp{
  repeated SearchResp responses=1;
}

message SearchResp{
  int64 accommodationId=1;
  string name=2;
  string location=3;
  string perks=4;
  int64 totalPrice=5;
  int64 priceOfAccommodation=6;
  int64 pricePerGuest=7;
  int32 numberOfGuests=8;
  int32 minGuests=9;
  int32 maxGuests=10;
}
message SearchReq{
  int32 numberOfGuests=1;
  string location = 2;
  string start_date = 3;
  string end_date = 4;
}
message AccommodationIdReq{
  int64 id=1;
}

message RentableIntervalIdReq{
  int64 id=1;
}

message ListOfRentableIntervalResp{
  repeated RentableIntervalResp rentableIntervals = 1;
}

message HostIdReq{
  string hostId = 1;
}

service AccommodationService{
  rpc createAccommodation(AccommodationReq) returns (AccommodationResp);
  rpc getById(AccommodationIdReq) returns(AccommodationResp);
  rpc getAllAccommodations(ListOfAccommodationResp) returns(ListOfAccommodationResp);
  rpc IsAutomatic(AccommodationAvailable) returns(Automatic);
  rpc createRentableInterval(RentableIntervalReq) returns (RentableIntervalResp);
  rpc getRentableIntervalsByAccommodationId(AccommodationIdReq) returns(ListOfRentableIntervalResp);
  rpc updateRentableInterval(UpdateRentableIntervalReq) returns(RentableIntervalResp);
  rpc search(SearchReq)returns(ListOfSearchResp);
  rpc getRentableIntervalById(RentableIntervalIdReq) returns(RentableIntervalResp);
  rpc getAccommodationsByHostId(HostIdReq) returns(ListOfAccommodationResp);
  rpc deleteAccommodation(AccommodationIdReq) returns(Automatic);

}
